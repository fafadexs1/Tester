
'use server';
/**
 * @fileOverview A Genkit flow for generic text generation.
 *
 * - genericTextGenerationFlow - Generates text based on a given prompt.
 * - GenericTextGenerationInput - The input type for the flow.
 * - GenericTextGenerationOutput - The output type for the flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenericTextGenerationInputSchema = z.object({
  promptText: z.string().describe('The prompt to generate text from.'),
});
export type GenericTextGenerationInput = z.infer<typeof GenericTextGenerationInputSchema>;

const GenericTextGenerationOutputSchema = z.object({
  generatedText: z.string().describe('The text generated by the AI.'),
});
export type GenericTextGenerationOutput = z.infer<typeof GenericTextGenerationOutputSchema>;

// This is the function that will be imported and called by other parts of the application.
export async function genericTextGenerationFlow(input: GenericTextGenerationInput): Promise<GenericTextGenerationOutput> {
  // It calls the Genkit-defined flow.
  return definedGenericTextGenerationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'genericTextGenerationPrompt',
  input: {schema: GenericTextGenerationInputSchema},
  output: {schema: GenericTextGenerationOutputSchema},
  prompt: `{{{promptText}}}

Por favor, gere uma resposta para o prompt acima.`,
});

// This is the Genkit-defined flow. It's not directly exported for external use,
// but called by the wrapper function above.
const definedGenericTextGenerationFlow = ai.defineFlow(
  {
    name: 'genericTextGenerationFlow', // This name is for Genkit's internal registration
    inputSchema: GenericTextGenerationInputSchema,
    outputSchema: GenericTextGenerationOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
      console.error('[genericTextGenerationFlow] LLM did not return a valid output structure. Returning default reply.');
      return { generatedText: "Desculpe, n√£o consegui gerar uma resposta no momento." };
    }
    return output;
  }
);
